{"version":3,"sources":["logo.svg","util.js","AffectedCountries/index.js","dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","AffectedCountries","state","data","affected_countries","statistic_taken_at","fetch","method","headers","then","response","json","setState","catch","err","console","log","class","className","placeholder","style","height","autoHide","this","map","item","index","key","React","PureComponent","Item","title","value","width","Summary","stat","updateTime","moment","fromNow","total_cases","total_deaths","total_recovered","new_cases","new_deaths","Dashboard","imgUrl","globalStat","nigerianStat","id","country_name","active_cases","serious_critical","region","total_cases_per1m","record_date","getGlobalStat","getNigerianStat","latest_stat_by_country","getImage","imgURL","url","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.addee3d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const apiKey = \"a6008027f0msh99a677355d68c9ep14d48bjsnef38b61f038e\"","import React from 'react';\r\nimport { apiKey } from '../util';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\n\r\nclass AffectedCountries extends React.PureComponent {\r\n  state = {\r\n    data: {\r\n      affected_countries: [],\r\n      statistic_taken_at: '2020-03-20 14:20:08',\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      'https://coronavirus-monitor.p.rapidapi.com/coronavirus/affected.php',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n          'x-rapidapi-key': apiKey,\r\n        },\r\n      }\r\n    )\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ data }))\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h6>Affected Countries</h6>\r\n          <input className=\"form-control\" placeholder=\"search\" />\r\n          <Scrollbars style={{ height: '85vh' }} autoHide>\r\n            <ul class=\"list-group list-group-flush\">\r\n              {this.state.data.affected_countries.map((item, index) => (\r\n                <li key={index} class=\"list-group-item\">\r\n                  {item}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </Scrollbars>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AffectedCountries;\r\n","import React from 'react';\r\nimport { apiKey } from '../util';\r\nimport moment from 'moment';\r\nimport AffectedCountries from '../AffectedCountries';\r\n\r\nfunction Item({ title, value }) {\r\n  return (\r\n    <div className=\"card m-1\" style={{ width: '18rem' }}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n        <h6 className=\"card-subtitle mb-2 text-muted\">\r\n          {value === '' ? 0 : value}\r\n        </h6>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Summary({ stat, title, updateTime }) {\r\n  return (\r\n    <div className=\"mt-5\">\r\n      <div className=\"d-flex flex-row justify-content-between pr-5 pl-5\">\r\n        <h5>{title}</h5>\r\n        <div className=\"hr-text hr-text-right text-right mb-2\">\r\n          Updated <span>{moment(updateTime).fromNow()}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex pr-5 pl-5\">\r\n        <Item title=\"Total Cases\" value={stat.total_cases} />\r\n        <Item title=\"Total Deaths\" value={stat.total_deaths} />\r\n        <Item title=\"Total Recovered\" value={stat.total_recovered} />\r\n        <Item title=\"New Cases\" value={stat.new_cases} />\r\n        <Item title=\"New Death\" value={stat.new_deaths} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Dashboard extends React.PureComponent {\r\n  state = {\r\n    imgUrl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/masks.php',\r\n    globalStat: {\r\n      total_cases: 0,\r\n      total_deaths: 0,\r\n      total_recovered: 0,\r\n      new_cases: 0,\r\n      new_deaths: 0,\r\n      statistic_taken_at: 0,\r\n    },\r\n    nigerianStat: {\r\n      id: '63425',\r\n      country_name: 'Nigeria',\r\n      total_cases: 0,\r\n      new_cases: 0,\r\n      active_cases: 0,\r\n      total_deaths: 0,\r\n      new_deaths: 0,\r\n      total_recovered: 0,\r\n      serious_critical: '',\r\n      region: null,\r\n      total_cases_per1m: '0.06',\r\n      record_date: '2020-03-20 13:40:02.543',\r\n    },\r\n  };\r\n  componentDidMount() {\r\n    this.getImage();\r\n    this.getGlobalStat();\r\n    this.getNigerianStat();\r\n  }\r\n\r\n  getGlobalStat = () => {\r\n    fetch(\r\n      'https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n          'x-rapidapi-key': apiKey,\r\n        },\r\n      }\r\n    )\r\n      .then(data => data.json())\r\n      .then(response => this.setState({ globalStat: response }))\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  getNigerianStat = () => {\r\n    fetch(\r\n      'https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=Nigeria',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n          'x-rapidapi-key': apiKey,\r\n        },\r\n      }\r\n    )\r\n      .then(data => data.json())\r\n      .then(response =>\r\n        this.setState({ nigerianStat: response.latest_stat_by_country[0] })\r\n      )\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  getImage = () => {\r\n    fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/masks.php', {\r\n      method: 'GET',\r\n      headers: {\r\n        'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n        'x-rapidapi-key': apiKey,\r\n      },\r\n    })\r\n      .then(data => this.setState({ imgURL: data.url }))\r\n      //   .then(response => console.log(response))\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { globalStat, nigerianStat, imgURL } = this.state;\r\n    return (\r\n      <div className=\"row m-0\">\r\n        <div className=\"col-md-4 col-lg-2\">\r\n          <AffectedCountries />\r\n        </div>\r\n        <div className=\"col-md-8 col-lg-8\">\r\n          {/* <img alt=\"info\" src={imgURL} style={{ height: 200, width: 200 }} /> */}\r\n          <Summary\r\n            title=\"Global Stat\"\r\n            updateTime={globalStat.statistic_taken_at}\r\n            stat={globalStat}\r\n          />\r\n          <Summary\r\n            title=\"Nigerian Stat\"\r\n            updateTime={nigerianStat.record_date}\r\n            stat={nigerianStat}\r\n          />\r\n\r\n          {/* <div>\r\n            <button type=\"button\" class=\"btn btn-outline-dark\">\r\n              View list of affected countries\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-outline-dark\">\r\n              View list of affected countries\r\n            </button>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dashboard from './dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}